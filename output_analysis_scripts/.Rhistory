library(plotly)
library(reshape2)
install.packages("plotly")
install.packages("reshape2")
library(plotly)
library(reshape2)
#load data
data <- read.csv(file.choose())
#load data
data <- read.csv(file.choose())
library(plotly)
library(reshape2)
#load data
data <- read.csv(file.choose())
my_df <- data[data[,8]<35,]
my_df$Lnsod
colnames(my_df)[24] <- 'LnSOD'
colnames(my_df)[24] <- 'LnSOD'
View(data)
View(data)
View(my_df)
#load data
data <- read.csv(file.choose())
View(data)
View(data)
colnames(my_df)[17] <- 'LnSOD'
my_df <- data[data[,8]<35,]
colnames(my_df)[17] <- 'LnSOD'
colnames(my_df)[5] <- 'MAX'
colnames(my_df)[18] <- 'LnArea'
SOD_lm <- lm(LnSOD ~ MAX + LnArea,data = my_df)
summary(SOD_lm)
#Graph Resolution (more important for more complex shapes)
graph_reso <- 0.05
#Setup Axis
axis_x <- seq(min(my_df$MAX), max(my_df$MAX), by = graph_reso)
axis_y <- seq(min(my_df$LnArea), max(my_df$LnArea), by = graph_reso)
#Sample points
SOD_lm_surface <- expand.grid(MAX = axis_x,LnArea = axis_y,KEEP.OUT.ATTRS = F)
SOD_lm_surface$LnSOD <- predict.lm(SOD_lm, newdata = SOD_lm_surface)
SOD_lm_surface <- acast(SOD_lm_surface, LnArea ~ MAX, value.var = "LnSOD") #y ~ x
hcolors=c("black")
SOD_plot <- plot_ly(my_df,
x = ~MAX,
y = ~LnArea,
z = ~LnSOD,
text = "Species",
type = "scatter3d",
mode = "markers",
marker = list(color = hcolors))
SOD_plot <- add_trace(p = SOD_plot,
z = SOD_lm_surface,
x = axis_x,
y = axis_y,
type = "surface",
opacity = 0.9,
color="black")%>%
layout(scene = list(xaxis = list(title = 'Max'),
yaxis = list(title = 'Ln(Area)'),
zaxis = list(title = 'Ln(k_SOD)')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'test',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
SOD_plot
fit4 <-lm(log(dontest$k_SOD) ~  dontest$Max + log(dontest$Area))
SOD_plot <- plot_ly(my_df,
x = ~MAX,
y = ~LnArea,
z = ~LnSOD,
text = "Species",
type = "scatter3d",
mode = "markers",
marker = list(color = hcolors))
SOD_plot <- add_trace(p = SOD_plot,
z = SOD_lm_surface,
x = axis_x,
y = axis_y,
type = "surface",
opacity = 0.9,
color="black")%>%
layout(scene = list(xaxis = list(title = 'Max (m)'),
yaxis = list(title = 'Ln Area (m^2)'),
zaxis = list(title = 'Ln k_SOD (D^-1)')),
annotations = list(
x = 1.13,
y = 1.05,
text = 'test',
xref = 'paper',
yref = 'paper',
showarrow = FALSE
))
SOD_plot
install.packages("rLakeAnalyzer")
# # }
#
# wtr = "22.51, 22.42, 22.4, 22.4, 22.4, 22.36, 22.3, 22.21, 22.11, 21.23, 16.42, 15.15, 14.24, 13.35, 10.94, 10.43, 10.36, 9.94, 9.45, 9.1, 8.91, 8.58, 8.43"
#
# #A vector defining the depths
# depths = "0, 0.5, 1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20"
calculThermocline(wtr,depths)
wtr = "22.51, 22.42, 22.4, 22.4, 22.4, 22.36, 22.3, 22.21, 22.11, 21.23, 16.42, 15.15, 14.24, 13.35, 10.94, 10.43, 10.36, 9.94, 9.45, 9.1, 8.91, 8.58, 8.43"
#A vector defining the depths
depths = "0, 0.5, 1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20"
calculThermocline(wtr,depths)
calculThermocline = function(wtr,depths){
require("rLakeAnalyzer")
t.d = thermo.depth(as.double(strsplit(wtr,",")[[1]]) ,as.double( strsplit(depths,',')[[1]]), seasonal=FALSE)
print(t.d)
return(t.d)
}
wtr = "22.51, 22.42, 22.4, 22.4, 22.4, 22.36, 22.3, 22.21, 22.11, 21.23, 16.42, 15.15, 14.24, 13.35, 10.94, 10.43, 10.36, 9.94, 9.45, 9.1, 8.91, 8.58, 8.43"
#A vector defining the depths
depths = "0, 0.5, 1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20"
calculThermocline(wtr,depths)
install.packages("speedglm")
#wtr = "22.51, 22.42, 22.4, 22.4, 22.4, 22.36, 22.3, 22.21, 22.11, 21.23, 16.42, 15.15, 14.24, 13.35, 10.94, 10.43, 10.36, 9.94, 9.45, 9.1, 8.91, 8.58, 8.43"
#depths = "0, 0.5, 1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20"
calculThermocline(wtr,depths)
calculThermocline = function(wtr,depths){
library(rLakeAnalyzer)
t.d = thermo.depth(as.double(strsplit(wtr,",")[[1]]) ,as.double( strsplit(depths,',')[[1]]), seasonal=FALSE)
print(t.d)
return(t.d)
}
wtr = "22.51, 22.42, 22.4, 22.4, 22.4, 22.36, 22.3, 22.21, 22.11, 21.23, 16.42, 15.15, 14.24, 13.35, 10.94, 10.43, 10.36, 9.94, 9.45, 9.1, 8.91, 8.58, 8.43"
depths = "0, 0.5, 1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20"
calculThermocline(wtr,depths)
calculThermocline = function(wtr,depths){
library(rLakeAnalyzer)
t.d = thermo.depth(as.double(strsplit(wtr,",")[[1]]) ,as.double( strsplit(depths,',')[[1]]), seasonal=FALSE)
return(t.d)
}
wtr = "22.51, 22.42, 22.4, 22.4, 22.4, 22.36, 22.3, 22.21, 22.11, 21.23, 16.42, 15.15, 14.24, 13.35, 10.94, 10.43, 10.36, 9.94, 9.45, 9.1, 8.91, 8.58, 8.43"
depths = "0, 0.5, 1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20"
calculThermocline(wtr,depths)
remove.packages("rLakeAnalyzer")
install.packages("rLakeAnalyzer")
install.packages("cluster")
remove.packages("rLakeAnalyzer")
install.packages("rLakeAnalyzer")
calculThermocline = function(wtr,depths){
library(rLakeAnalyzer)
t.d = thermo.depth(as.double(strsplit(wtr,",")[[1]]) ,as.double( strsplit(depths,',')[[1]]), seasonal=FALSE)
return(t.d)
}
wtr = "22.51, 22.42, 22.4, 22.4, 22.4, 22.36, 22.3, 22.21, 22.11, 21.23, 16.42, 15.15, 14.24, 13.35, 10.94, 10.43, 10.36, 9.94, 9.45, 9.1, 8.91, 8.58, 8.43"
depths = "0, 0.5, 1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20"
calculThermocline(wtr,depths)
wtr = "22.51, 22.42, 22.4, 22.4, 22.4, 22.36, 22.3, 22.21, 22.11, 21.23, 16.42, 15.15, 14.24, 13.35, 10.94, 10.43, 10.36, 9.94, 9.45, 9.1, 8.91, 8.58, 8.43"
depths = "0, 0.5, 1, 1.5, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20"
depths = '1,2,3,4,5,6,7'
calculThermocline(wtr,depths)
